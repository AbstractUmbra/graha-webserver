[project]
name = "webserver"
version = "0.1.0"
description = "Add your description here"
readme = { file = "README.md" }
license = { file = "LICENSE" }
requires-python = ">=3.12, <4.0"
dependencies = [
    "brotli>=1.1.0",
    "litestar-asyncpg>=0.5.0",
    "litestar[standard]>=2.16.0",
    "msgspec>=0.19.0",
    "picologging>=0.9.3",
]

[tool.ruff]
line-length = 125
target-version = "py312"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ANN401",
    "ASYNC109", # dpy commonly uses this parameter
    "COM812",   # unnecessary since we use the formatter
    "CPY001",   # can't detect MPL for some reason
    "D205",     # Not very intelligently identified
    "D404",     # I like this form of prose
    "EM101",    # in this case this is okay
    "F401",
    "F402",
    "F403",
    "F405",
    "PD011",    # this is not a numpy codebase
    "PERF203",
    "PLC0414",  # pyright ruling for `as` imports needed
    "Q000",
    "RUF001",
    "RUF009",
    "S101",     # assert is used for type checking in this codebase
    "SIM105",
    "TRY003",   # over-eager rule
    "TRY301",   # unrealistic rule
    "UP034",
    "UP038",
]
unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "lf"

[tool.ruff.lint.isort]
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-import-conventions.aliases]
"concurrent.futures" = "cf"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.

"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing.runtime_checkable".msg = "Runtime checkable is fundamentally unsafe."
"typing_extensions.runtime_checkable".msg = "Runtime checkable is fundamentally unsafe."

# these don't work as deferred imports, intentionally, because type checkers are dumb
# and require they be imported directly from typing to work, this breaks the deferred re-export.
"typing.Final".msg = "see https://github.com/microsoft/pyright/issues/9664#issuecomment-2574042580"
"typing_extensions.Final".msg = "see https://github.com/microsoft/pyright/issues/9664#issuecomment-2574042580"
"typing.final".msg = "see https://github.com/microsoft/pyright/issues/9664#issuecomment-2574042580"
"typing_extensions.final".msg = "see https://github.com/microsoft/pyright/issues/9664#issuecomment-2574042580"

[tool.pyright]
include = ["src/**/*.py"]
exclude = ["**/__pycache__", "build", "dist", "docs"]
venv = ".venv/"
venvPath = "."
useLibraryCodeForTypes = true
pythonVersion = "3.12"
pythonPlatform = "All"
# strict doesn't allow turning off / downgrading severity of rules
typeCheckingMode = "standard"

# type issues
disableBytesTypePromotions = true
strictParameterNoneValue = true
reportMissingTypeStubs = "error"
reportMissingModuleSource = "warning"
reportInvalidTypeForm = "error"
reportMissingImports = "error"
reportUndefinedVariable = "error"
reportInvalidTypeVarUse = "error"
reportSelfClsParameterName = "error"

reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallIssue = "error"
reportGeneralTypeIssues = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidTypeArguments = "error"
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportReturnType = "error"
reportTypedDictNotRequiredAccess = "error"
reportUnhashable = "error"
reportUnusedExcept = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"
reportConstantRedefinition = "error"
reportDeprecated = "warning"

reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"

reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "warning"

reportCallInDefaultInitializer = "warning"
reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "error"

# other type-issues

reportUntypedBaseClass = "warning"         # spec says treat this as Any
reportUntypedClassDecorator = "warning"    # spec says (Any) -> Any
reportUntypedFunctionDecorator = "warning" # spec says (Any) -> Any
reportUntypedNamedTuple = "none"           # Just no.

# not type issues, even if pyright and mypy offer checks as if they were
# by calling them "Strict mode checks"
# these are "opinionated errors with well-defined type interpretation"

reportImplicitOverride = "none"
reportMissingTypeArgument = "none"
deprecateTypingAliases = false
reportUnnecessaryComparison = "none"
reportUnnecessaryContains = "none"
reportUnnecessaryIsInstance = "none"
reportAssertAlwaysTrue = "none"
reportTypeCommentUsage = "none"

# reasonably preventing accidents

reportUnnecessaryTypeIgnoreComment = "warning"

reportUnsupportedDunderAll = "error"
reportWildcardImportFromLibrary = "error"
reportShadowedImports = "warning"

reportUninitializedInstanceVariable = "warning"
reportUnusedCoroutine = "warning"
reportUnusedExpression = "warning"

reportPrivateUsage = "warning"
reportPrivateImportUsage = "warning"

reportInvalidStringEscapeSequence = "error"
reportRedeclaration = "error"
reportUnboundVariable = "error"

reportUnusedClass = "warning"
reportUnusedImport = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"

# analysis behavior
enableTypeIgnoreComments = true
enableReachabilityAnalysis = true
analyzeUnannotatedFunctions = true
reportImportCycles = "error"
enableExperimentalFeatures = false

# inference settings
strictListInference = true
strictDictionaryInference = true
strictSetInference = true

# overly-worriesome linter-esque options
reportImplicitStringConcatenation = "none"
reportUnusedCallResult = "none"
reportDuplicateImport = "none"             # handled by ruff
